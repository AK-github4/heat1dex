/*  IVP 
    1-d Heat equation, 0-Dirichlet B.C.
    explicit scheme
    
    u_t=a u_{xx},       0<x<1, t>0
    u(0,t)=u(1,t)=0,    t>0
    u(x,0)=f(x),        0<x<1
*/

#include <stdio.h>
#include <math.h>
#define J 50

/* global */
double u[J+1], nu[J+1];

void outputdata(double t, double dx, double u[])
{
  int j;
  double x;

  for (j = 0; j <= J; j++)
  {
    x= dx * j;
    printf("%f %f %f\n", t,x,u[j]);
  }
  printf("\n");
}


/* Initial Data */
double f(double x)
{
  if (x <= 0.6 && x >= 0.4 )
    return 1.0;
  else
    return 0.0;
}

int main()
{
  int i, j, k, n, NTmax, Nout;
  double dt, dx, lambda, a, Tmax ;
  double A[J+1][J+1];
  double b[J];
  double f(double);
  double L = 1;

  /* parameter and setting */
  a=1.0;
  Tmax=0.1;

  /* numerical parameters */
  dx = L / J; /*Lを変えて区間を調整*/
  dt = 0.001;
  lambda=a*dt/(dx*dx);
    /* Remark:
       If lambda>0.5, then this explicit scheme is unstable.
    */
  NTmax = (int)(Tmax/dt);
  Nout = NTmax/50;

  /* set an initial data */
  for (j = 0; j <= J; j++){
    u[j] = f(j * dx);
    b[j] = u[j];
    }

  /* output data at t=0.0 */
  outputdata(0.0, dx, u);

/*陰的スキーム*/

      for(n = 0; n < J; n++){
   for(j = 0; j < J; j++){
    if(n==j) A[n][j] = 1 + 2*lambda;
    else if(n-j == 1 || j-n == 1) A[n][j] = -lambda;
    else A[n][j] = 0;
   }
  }
  /*A[0][0]=1+3*lambda;*/
  /*A[49][49]=1+lambda;*/

  for (n = 0; n <= NTmax; n++) {


    /*--- 反復列のデータを出力 ---*/
    /*    この部分はなくても影響しない */


    for(i=0;i<J;i++) {
      /*nu[i]=b[i];*/
      for(j=0;j<J;j++) {
        if(j!=i) {
          nu[i]-=A[i][j]*u[j] ;
        }
      }
      nu[i]=nu[i]/A[i][i];
    }

    for(i=0;i<J;i++) {
      u[i]=nu[i];
    }


    /* output data at every Nout steps */
    if (n % Nout == 0) outputdata((n + 1) * dt, dx, u);
  }
  return 0;
}
